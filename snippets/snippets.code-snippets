{
  "Express basic setups": {
    "prefix": "!express",
    "body": [
      "import express from 'express';",
      "",
      "const app = express();",
      "const port = ${1:3000};",
      "",
      "app.get('/', (req, res) => {",
      "    res.send('Hello World!');",
      "});",
      "",
      "app.listen(port, () => {",
      "    console.log(`Server running on port ${port}`);",
      "});"
    ],
    "description": "Basic Express.js setup"
  },
  "Express GET Route": {
    "prefix": "!eget",
    "body": [
      "app.get('${1:/path}', (req, res) => {",
      "    ${2:res.send('GET request to the homepage');}",
      "});"
    ],
    "description": "Express.js GET route"
  },
  "Express POST Route": {
    "prefix": "!epost",
    "body": [
      "app.post('${1:/path}', (req, res) => {",
      "    ${2:res.send('POST request to the homepage');}",
      "});"
    ],
    "description": "Express.js POST route"
  },
  "Express PUT Route": {
    "prefix": "!eput",
    "body": [
      "app.put('${1:/path}', (req, res) => {",
      "    ${2:res.send('PUT request to the homepage');}",
      "});"
    ],
    "description": "Express.js PUT route"
  },
  "Express DELETE Route": {
    "prefix": "!edelete",
    "body": [
      "app.delete('${1:/path}', (req, res) => {",
      "    ${2:res.send('DELETE request to the homepage');}",
      "});"
    ],
    "description": "Express.js DELETE route"
  },
  "Express PATCH Route": {
    "prefix": "!epatch",
    "body": [
      "app.patch('${1:/path}', (req, res) => {",
      "    ${2:res.send('PATCH request to the homepage');}",
      "});"
    ],
    "description": "Express.js PATCH route"
  },
  "Express OPTIONS Route": {
    "prefix": "!eoptions",
    "body": [
      "app.options('${1:/path}', (req, res) => {",
      "    ${2:res.send('OPTIONS request to the homepage');}",
      "});"
    ],
    "description": "Express.js OPTIONS route"
  },
  "Express HEAD Route": {
    "prefix": "!ehead",
    "body": [
      "app.head('${1:/path}', (req, res) => {",
      "    ${2:res.send('HEAD request to the homepage');}",
      "});"
    ],
    "description": "Express.js HEAD route"
  },
  "Express Use Route Declare": {
    "prefix": "!eruse",
    "body": ["app.use('${1:/}','${2:}');"],
    "description": "Express.js use route declaration"
  },
  "Express Middleware": {
    "prefix": "!emiddleware",
    "body": [
      "app.use((req, res, next) => {",
      "    console.log('${1:Request Type}:', req.method);",
      "    next();",
      "});"
    ],
    "description": "Express.js middleware"
  },
  "Express Router GET Route": {
    "prefix": "!routeget1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').get((req, res) => {",
      "    ${2:res.send('GET request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router GET route using router.route()"
  },
  "Express Router POST Route": {
    "prefix": "!routepost1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').post((req, res) => {",
      "    ${2:res.send('POST request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router POST route using router.route()"
  },
  "Express Router PUT Route": {
    "prefix": "!routeput1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').put((req, res) => {",
      "    ${2:res.send('PUT request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router PUT route using router.route()"
  },
  "Express Router DELETE Route": {
    "prefix": "!routedelete1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').delete((req, res) => {",
      "    ${2:res.send('DELETE request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router DELETE route using router.route()"
  },
  "Express Router PATCH Route": {
    "prefix": "!routepatch1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').patch((req, res) => {",
      "    ${2:res.send('PATCH request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router PATCH route using router.route()"
  },
  "Express Router OPTIONS Route": {
    "prefix": "!routeoptions1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').options((req, res) => {",
      "    ${2:res.send('OPTIONS request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router OPTIONS route using router.route()"
  },
  "Express Router HEAD Route": {
    "prefix": "!routehead1",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').head((req, res) => {",
      "    ${2:res.send('HEAD request');}",
      "});",
      "",
      "export default router;"
    ],
    "description": "Express.js router HEAD route using router.route()"
  },
  "Express Router GET Route2": {
    "prefix": "!routeget2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').get('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router GET route using router.route() without the basic controller setup"
  },
  "Express Router POST Route2": {
    "prefix": "!routepost2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').post('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router POST route using router.route() without the basic controller setup"
  },
  "Express Router PUT Route2": {
    "prefix": "!routeput2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').put('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router PUT route using router.route() without the basic controller setup"
  },
  "Express Router DELETE Route2": {
    "prefix": "!routedelete2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').delete('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router DELETE route using router.route() without the basic controller setup"
  },
  "Express Router PATCH Route2": {
    "prefix": "!routepatch2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').patch('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router PATCH route using router.route() without the basic controller setup"
  },
  "Express Router OPTIONS Route2": {
    "prefix": "!routeoptions2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').options('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router OPTIONS route using router.route() without the basic controller setup"
  },
  "Express Router HEAD Route2": {
    "prefix": "!routehead2",
    "body": [
      "import { Router } from 'express';",
      "",
      "const router = Router();",
      "",
      "router.route('${1:/path}').head('${2:}');",
      "",
      "export default router;"
    ],
    "description": "Express.js router HEAD route using router.route() without the basic controller setup"
  },
  "Express Setup With Express Middleware": {
    "prefix": "!esetup",
    "body": [
      "import express from 'express';",
      "",
      "const app = express();",
      "const port = ${1:3000};",
      "",
      "app.use(express.json());",
      "app.use(express.urlencoded({ extended: true }));",
      "",
      "app.get('/', (req, res) => {",
      "    res.send('Hello World!');",
      "});",
      "",
      "app.listen(port, () => {",
      "    console.log(`Server running on port ${port}`);",
      "});"
    ],
    "description": "Express.js setup with express middleware"
  },
  "Express Full Setup": {
    "prefix": "!efullsetup",
    "body": [
      "import express from 'express';",
      "import cookieparser from 'cookie-parser';",
      "import cors from 'cors';",
      "",
      "const app = express();",
      "app.use(cookieparser());",
      "app.use(",
      "  cors({",
      "    origin: process.env.CORS_ORIGIN,",
      "    credentials: true,",
      "  })",
      ");",
      "const port = ${1:process.env.PORT || 3000};",
      "",
      "app.use(express.json());",
      "app.use(express.urlencoded({ extended: true }));",
      "",
      "app.get('/', (req, res) => {",
      "    res.send('Hello World!');",
      "});",
      "",
      "app.listen(process.env.PORT, () => {",
      "    console.log(`Server running on port ${process.env.PORT}`);",
      "});"
    ],
    "description": "Express.js full setup"
  }
}
